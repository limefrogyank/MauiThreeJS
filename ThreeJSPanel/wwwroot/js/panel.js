import*as s from"./_snowpack/pkg/three.js";import{PerspectiveCamera as c,Scene as d,Vector3 as m,WebGLRenderer as f}from"./_snowpack/pkg/three.js";import{OrbitControls as u}from"./_snowpack/pkg/three/examples/jsm/controls/OrbitControls.js";class x{constructor(e){this._guid=this.uuidv4(),this._parent=e,this._modelScene=new d;let n=this._parent.clientWidth/this._parent.clientHeight,r=70;this._camera=new c(r,n,.01,100),this._camera.position.set(0,.7,1.5),this._camera.up.set(0,1,0),this._camera.lookAt(new m(0,0,0)),this._camera.updateMatrixWorld(),this._camera.updateProjectionMatrix(),this._renderer=new f({preserveDrawingBuffer:!1}),this._renderer.setPixelRatio(window.devicePixelRatio),this._renderer.setSize(e.clientWidth,e.clientHeight),e.appendChild(this._renderer.domElement),this._controls=new u(this._camera,this._renderer.domElement),this._bufferGeometry=new s.BufferGeometry,this._modelShader=new s.ShaderMaterial,this._modelShader.vertexColors=!0,this._modelShader.side=s.BackSide,this._mesh=new s.Mesh(this._bufferGeometry),this._mesh.material=this._modelShader,this._modelScene.add(this._mesh),this._renderer.clear(),this._renderer.autoClear=!1,this._renderer.clear()}uuidv4(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var n=Math.random()*16|0,r=e=="x"?n:n&3|8;return r.toString(16)})}get id(){return this._guid}animate(){requestAnimationFrame(this.animate.bind(this));const e=Date.now()*.001;this._mesh.rotation.x=e*.25,this._mesh.rotation.y=e*.5,this._renderer.clear(),this._renderer.render(this._modelScene,this._camera)}start(){this.animate()}setVertexShaderModel(e){this._modelShader.vertexShader=e}setFragmentShaderModel(e){this._modelShader.fragmentShader=e}setVertices(e){this._bufferGeometry.setAttribute("position",new s.Float32BufferAttribute(e,3))}setColors(e){this._bufferGeometry.setAttribute("color",new s.Float32BufferAttribute(e,3))}setIndices(e){this._bufferGeometry.setIndex(new s.Uint32BufferAttribute(e,1))}}const i=new Map;window.panels=i;export async function createPanel(t){let e=new x(t);return i.set(e.id,e),e.id}export async function loadShaders(t,e,n){let r=i.get(t);if(r!=null){let a=await fetch(e),o=await a.text();r.setVertexShaderModel(o),a=await fetch("./RenderModel.fragment.fx");let l=await a.text();r.setFragmentShaderModel(l)}}export function start(t){i.get(t)?.start()}export function setSlow(t,e,n){try{let r=i.get(t),a=n;switch(e){case"indices":return r?.setIndices(a);case"vertices":return r?.setVertices(a);case"colors":return r?.setColors(a)}}catch(r){console.log("error",r)}}export function setFast(t,e,n){try{let r=BINDING.conv_string(t),a=i.get(r),o=BINDING.conv_string(e);if(o=="indices"){let h=p(n);return a?.setIndices(h)}let l=_(n);switch(o){case"vertices":return a?.setVertices(l);case"colors":return a?.setColors(l)}}catch(r){console.log("error",r)}}function _(t){const e=Blazor.platform.getArrayEntryPtr(t,0,4),n=Blazor.platform.getArrayLength(t);return new Float32Array(Module.HEAPF32.buffer,e,n)}function p(t){const e=Blazor.platform.getArrayEntryPtr(t,0,4),n=Blazor.platform.getArrayLength(t);return new Uint32Array(Module.HEAPU32.buffer,e,n)}function S(t){const e=Blazor.platform.getArrayEntryPtr(t,0,2),n=Blazor.platform.getArrayLength(t);return new Uint16Array(Module.HEAPF32.buffer,e,n)}
